// Code generated by make; DO NOT EDIT.
syntax = "proto3";
package cosi.v1;

import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "cosi";

extend google.protobuf.EnumOptions {
  // Indicates that this enum is OPTIONAL and part of an experimental
  // API that may be deprecated and eventually removed between minor
  // releases.
  bool alpha_enum = 1060;
}
extend google.protobuf.EnumValueOptions {
  // Indicates that this enum value is OPTIONAL and part of an
  // experimental API that may be deprecated and eventually removed
  // between minor releases.
  bool alpha_enum_value = 1060;
}
extend google.protobuf.FieldOptions {
  // Indicates that a field MAY contain information that is sensitive
  // and MUST be treated as such (e.g. not logged).
  bool cosi_secret = 1059;

  // Indicates that this field is OPTIONAL and part of an experimental
  // API that may be deprecated and eventually removed between minor
  // releases.
  bool alpha_field = 1060;
}
extend google.protobuf.MessageOptions {
  // Indicates that this message is OPTIONAL and part of an experimental
  // API that may be deprecated and eventually removed between minor
  // releases.
  bool alpha_message = 1060;
}
extend google.protobuf.MethodOptions {
  // Indicates that this method is OPTIONAL and part of an experimental
  // API that may be deprecated and eventually removed between minor
  // releases.
  bool alpha_method = 1060;
}
extend google.protobuf.ServiceOptions {
  // Indicates that this service is OPTIONAL and part of an experimental
  // API that may be deprecated and eventually removed between minor
  // releases.
  bool alpha_service = 1060;
}

service COSIDriver {
  rpc CreateBucket (CreateBucketRequest)
    returns (CreateBucketResponse) {}
}

message CreateBucketRequest {
  // The suggested name for the storage space. This field is REQUIRED.
  // It serves two purposes:
  // 1) Idempotency - This name is generated by the CO to achieve
  //    idempotency.  The Driver SHOULD ensure that multiple
  //    `CreateBucket` calls for the same name do not result in more
  //    than one piece of storage provisioned corresponding to that
  //    name. If a Driver is unable to enforce idempotency, the CO's
  //    error recovery logic could result in multiple (unused) volumes
  //    being provisioned.
  //    In the case of error, the CO MUST handle the gRPC error codes
  //    per the recovery behavior defined in the "CreateBucket Errors"
  //    section below.
  //    The CO is responsible for cleaning up buckets it provisioned
  //    that it no longer needs. If the CO is uncertain whether a bucket
  //    was provisioned or not when a `CreateBucket` call fails, the CO
  //    MAY call `CreateBucket` again, with the same name, to ensure the
  //    bucket exists and to retrieve the bucket's `bucket_id` (unless
  //    otherwise prohibited by "CreateBucket Errors").
  // 2) Suggested name - Some storage systems allow callers to specify
  //    an identifier by which to refer to the newly provisioned
  //    storage. If a storage system supports this, it can optionally
  //    use this name as the identifier for the new volume.
  // Any Unicode string that conforms to the length limit is allowed
  // except those containing the following banned characters:
  // U+0000-U+0008, U+000B, U+000C, U+000E-U+001F, U+007F-U+009F.
  // (These are control characters other than commonly used whitespace.)
  string name = 1;

    // rest of the fields
}

message CreateBucketResponse {
  // Contains all attributes of the newly created bucket that are
  // relevant to the CO along with information required by the Driver
  // to uniquely identify the bucket. This field is REQUIRED.
  Bucket bucket = 1;
}

message Bucket {
  // The identifier for this bucket, generated by the driver.
  // This field is REQUIRED.
  // This field MUST contain enough information to uniquely identify
  // this specific bucket vs all other buckets supported by this driver.
  // This field SHALL be used by the CO in subsequent calls to refer to
  // this bucket.
  // The SP is NOT responsible for global uniqueness of bucket_id across
  // multiple SPs.
  string bucket_id = 1;
}